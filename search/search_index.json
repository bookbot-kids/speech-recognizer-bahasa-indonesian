{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#childrens-speech-recognizer-bahasa-indonesia","title":"Children's Speech Recognizer Bahasa Indonesia","text":"<p>A cross platform (Android/iOS/MacOS) Bahasa Indonesia children's speech recognizer library, written in Flutter and leveraging the Kaldi framework. The speech recognizer library reads a buffer from a microphone device and converts spoken words into text in near-instant inference time with high accuracy. This library is also extensible to your own custom speech recognition model!</p> <p>Note</p> <p>Since our built-in default model was trained on children's speech, it may perform poorly on adult's speech.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Indonesian speech-to-text through a Kaldi-based automatic speech recognition (ASR) model, trained on children's speech.</li> <li>Train custom machine learning model with model extractor.</li> <li>Integrate speech-to-text model with mobile and desktop applications.</li> </ul>"},{"location":"#installation-setup","title":"Installation / Setup","text":"<ul> <li>Install Flutter SDK.</li> <li>Run <code>git lfs pull</code> command.</li> <li>Install Visual Studio Code.</li> <li>Open the project in Visual Studio Code, navigate to <code>lib/main.dart</code>.</li> <li>Launch an Android emulator or iOS simulator. Optionaly, you can also connect to a real device.</li> <li>Run the demo on Android/iOS/MacOS by going to the top navigation bar of VSCode, hit Run, then Start Debugging.</li> </ul> <p>Note Kaldi libraries have been compiled from commit hash <code>9af2c5c16389e141f527ebde7ee432a0c1df9fb9</code> with OpenFST v1.7.3.</p>"},{"location":"#android","title":"Android","text":"<p>On Android, you will need to allow microphone permission in <code>AndroidManifest.xml</code> like so:</p> <pre><code>&lt;uses-feature android:name=\"android.hardware.microphone\" android:required=\"false\"/&gt;\n&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\"/&gt;\n</code></pre>"},{"location":"#ios","title":"iOS","text":"<p>Similarly on iOS/MacOS:</p> <ul> <li>Open Xcode</li> <li>Navigate to <code>Info.plist</code></li> <li>Add microphone permission <code>NSMicrophoneUsageDescription</code>. You can follow this guide.</li> </ul>"},{"location":"#how-to-use","title":"How to Use","text":""},{"location":"#flutter-sample-app","title":"Flutter Sample App","text":"<ul> <li>After setting up, run the app by pressing the <code>Load model</code> button and then <code>Start listening</code></li> <li>Speak into the microphone and the corresponding output text will be displayed in the text field.</li> <li>Press <code>Stop listening</code> to stop the app from listening.</li> </ul> main.dart<pre><code>import 'package:speech_recognizer/speech_recognizer.dart';\n\nclass _MyHomePageState implements SpeechListener { // (1)\n  final recognizer = SpeechController.shared;\n\n  void _load() async {\n    // ask for permission\n    final permissions = await SpeechController.shared.permissions(); // (2)\n    if (permissions == AudioSpeechPermission.undetermined) {\n      await SpeechController.shared.authorize();\n    }\n\n    if (await SpeechController.shared.permissions() !=\n        AudioSpeechPermission.authorized) {\n      return;\n    }\n\n    if (!_isInitialized) {\n      await SpeechController.shared.initSpeech('id'); // (3)\n      setState(() {\n        _isInitialized = true;\n      });\n\n      SpeechController.shared.addListener(this); // (4)\n    }\n  }\n\n  @override\n  void onResult(Map result, bool wasEndpoint) { // (5)\n    List&lt;List&lt;String&gt;&gt; candidates = result.containsKey('partial') // (6)\n        ? [result['partial'].trim().split(' ')]\n        : result['alternatives']\n            .map((x) =&gt; x['text'].trim().split(' ').cast&lt;String&gt;().toList())\n            .toList()\n            .cast&lt;List&lt;String&gt;&gt;();\n    if (candidates.isEmpty ||\n        !candidates\n            .any((element) =&gt; element.any((element) =&gt; element.isNotEmpty))) {\n      return;\n    }\n  }\n}\n</code></pre> <ol> <li>Setup listener by implements <code>SpeechListener</code> in your class.</li> <li>Ask for recording permission.</li> <li>Initialize Indonesian recognizer model.</li> <li>Register listener in this class.</li> <li>Output text listener while speaking.</li> <li>Normalized result.</li> </ol>"},{"location":"#file-structure","title":"File Structure","text":"Platform Code Function Flutter <code>speech_recognizer.dart</code> Interface API to communicate with native platform (Android/iOS/Mac). There are many speech recognizer methods, check <code>lib/main.dart</code> to know how to use them. All Platforms <code>model-id-id</code> Speech model shared for all platforms. Replace <code>model-id-id/graph</code> to change the model dictionary. iOS/MacOS <code>SpeechController.swift</code> Native platform channel for speech recognizer on iOS/MacOS. It uses Vosk with custom model. Android <code>SpeechController.kt</code> Native platform channel for speech recognizer on android. It uses Vosk with custom model."},{"location":"#helpful-links-resources","title":"Helpful Links &amp; Resources","text":"<ul> <li>Flutter developer document</li> <li>Android developer document</li> <li>iOS/MacOS developer document</li> </ul>"},{"location":"#contributors","title":"Contributors","text":""},{"location":"#credits","title":"Credits","text":"<p>Alpha Cephei/Vosk</p>"},{"location":"contributing/","title":"Contributing to Speech Recognizer Bahasa Indonesian","text":"<p>Hi there! Thanks for taking your time to contribute!</p> <p>We welcome everyone to contribute and we value each contribution, even the smallest ones! We want to make contributing to this project as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be mindful to respect our Code of Conduct.</p>"},{"location":"contributing/#we-develop-with-github","title":"We Develop with Github","text":"<p>We use github to host code, to track issues and feature requests, as well as accept pull requests.</p>"},{"location":"contributing/#we-use-github-so-all-code-changes-happen-through-pull-requests","title":"We Use Github, So All Code Changes Happen Through Pull Requests","text":"<p>Pull requests are the best way to propose changes to the codebase. We actively welcome your pull requests:</p> <ol> <li>Fork the repo and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>If you've changed APIs, update the documentation.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Issue that pull request!</li> </ol>"},{"location":"contributing/#any-contributions-you-make-will-be-under-the-apache-20-license","title":"Any contributions you make will be under the Apache 2.0 License","text":"<p>In short, when you submit code changes, your submissions are understood to be under the same Apache 2.0 License that covers the project. Feel free to contact the maintainers if that's a concern.</p>"},{"location":"contributing/#report-bugs-using-githubs-issues","title":"Report bugs using Github's issues","text":"<p>We use GitHub issues to track public bugs. Report a bug by opening a new issue.</p>"},{"location":"contributing/#write-bug-reports-with-detail-background-and-sample-code","title":"Write bug reports with detail, background, and sample code","text":"<p>This is an example of a good and thorough bug report.</p> <p>Great Bug Reports tend to have:</p> <ul> <li>A quick summary and/or background</li> <li>Steps to reproduce</li> <li>Be specific!</li> <li>Give sample code if you can.</li> <li>What you expected would happen</li> <li>What actually happens</li> <li>Notes (possibly including why you think this might be happening, or stuff you tried that didn't work)</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under its Apache 2.0 License.</p>"},{"location":"contributing/#references","title":"References","text":"<p>This document was adapted from the open-source contribution guidelines for Facebook's Draft</p>"},{"location":"speech_recognizer/doc/api/static-assets/readme/","title":"highlight.js","text":"<p>Generated from https://highlightjs.org/download/ on 2021-07-13</p> <p>Included languages:</p> <ul> <li>bash</li> <li>c  </li> <li>css</li> <li>dart</li> <li>diff</li> <li>html, xml</li> <li>java</li> <li>javascript</li> <li>json</li> <li>kotlin</li> <li>markdown</li> <li>objective-c</li> <li>plaintext  </li> <li>shell</li> <li>swift</li> <li>yaml</li> </ul>"}]}